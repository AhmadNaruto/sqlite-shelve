#!/usr/bin/env python
#################################################################################################
# shelve-tool
# Manages SQLiteShelve databases
# Usage: shelve-tool _command_ [options] [_field1_=value] [_field2_=value] ...
#        commands
#        add-type aNewRegisteredType
#        add --type=_aRegisteredType_  _key_ _field_=value [_field2_=value] ... - add a record of a registered type 
#        update _key_ _field_=newvalue [_field2_=newvalue] ... - update existing record with new field values
#        delete _key_ - remove an entry from the database
#        list - list all the keys in the database
#        show _key_ - shows the contents of record indexed by _key_
# namespace(file='mydb', func=<function add at 0x1013f4050>, key='obj1', keywords=['database=blah', 'count=4'], type='user-object')
##################################################################################################
import sqliteshelve as shelve
import argparse
import os
import sys
import ConfigParser

def parse_keywords(keywords):
    """
      Returns a dictionary for valid key=value strings
    """

    d = {}
    try:
       d = dict([x.split('=',1) for x in keywords])
    except ValueError,e:
       for kw in keywords:
          if '=' not in kw:
             print "Keyword: %s is invalid" % kw
       print "All keywords should be formatted as key=value."
       

    return d

def add(args):
    """
      Add a new record to the database.
    """

    rec = parse_keywords(args.keywords)
    if rec:
       rec['type'] = args.type
       rec['key'] = args.key

    db = shelve.open(args.file)
    if args.key in db:
       print "Record with key: %s already exists." % args.key
       return

    db[args.key] = rec
    db.close() #commits changes    


def list_records(args):
    """
       List the records in a database.
    """
    db = shelve.open(args.file)
    
    if args.long:
       header = "%-15s  %-60s" % ('Object Key','Data')
       format_str = "%-15s  %-60s"
    else:
       header = 'Object Key'

    print header
    print
    for key in db:
        if args.long:
           print format_str % (key,db[key])
        else:
           print key

def show(args):
    """
      Show contents of a record.
    """
    db = shelve.open(args.file)
    rec = db[args.key]
    print rec        

def update(args):
    """
      Update a records attributes.
    """
    db = shelve.open(args.file)
    if args.key in db:
       updates = parse_keywords(args.keywords)
       rec_to_update = db[args.key]
       rec_to_update.update(updates)
       db[args.key] = rec_to_update
       db.close() #commit changes
    else:
       print "Key: %s does not exist." % args.key

def delete(args):
    """
      Delete a record from the database.
    """
    db = shelve.open(args.file)
    if args.key in db:
       del db[args.key]
       print "Record for %s deleted." % args.key
       db.close() #commit or delete will not happen
    else:
       print "Cannot delete. Key: %s does not exist" % args.key
       
    
parser = argparse.ArgumentParser('shelve-tool')
parser.add_argument('--file','-f',help='shelve file',dest='file',default='shelve.db')
subparsers = parser.add_subparsers(help='Command help')

#Add command
parser_add = subparsers.add_parser('add',help='Add Command Help')
parser_add.add_argument('key',help='A string that serves as a name for a new record')
parser_add.add_argument('--type','-t',help='User-defined type for this record. Used to query or list records by a type',dest='type',default='user-object')
parser_add.add_argument('keywords',nargs='*',help='space-separated key=value pairs, corresponding to fields and values in the record')
parser_add.set_defaults(func=add)

#Update command
parser_update = subparsers.add_parser('update',help='Update Command Help')
parser_update.add_argument('key',help='Key identifying the record')
parser_update.add_argument('keywords',nargs='*',help='space-separated key=value pairs, corresponding to fields and values in the record.')
parser_update.set_defaults(func=update)

#Delete command
parser_delete = subparsers.add_parser('delete',help="Delete Command Help")
parser_delete.add_argument('key',help='Key identifying record')
parser_delete.set_defaults(func=delete)

#List command
parser_list = subparsers.add_parser('list',help='List Command Help')
parser_list.add_argument('--type','-t',help='Limit list to --type=USERTYPE',dest='type')
parser_list.add_argument('--long','-l',help='Show long listing',action='store_true')
parser_list.set_defaults(func=list_records)

#Show command
parser_show = subparsers.add_parser('show',help='Show Command Help')
parser_show.add_argument('key',help='Key identifying name of record.')
parser_show.set_defaults(func=show)


args = parser.parse_args()
args.func(args)
